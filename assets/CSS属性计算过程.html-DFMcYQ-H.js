import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,b as i,d as t,o as l}from"./app-_kwc0Tdz.js";const n={},h=i("h1",{id:"css属性的计算过程",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#css属性的计算过程"},[i("span",null,"CSS属性的计算过程")])],-1),d=i("p",null,"请简述css中属性的计算过程",-1),p=t(`<p>首先有一段最简单的代码</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置一个段落的字体颜色为红色。<br> 那么这个段落就只有一个color属性吗？</p><p>很明显不是，打开控制台选中这个段落，会发现其他所有的CSS属性都在，只不过全部设置的默认值。</p><h2 id="计算顺序" tabindex="-1"><a class="header-anchor" href="#计算顺序"><span>计算顺序</span></a></h2><ul><li>确定声明值</li><li>层叠冲突</li><li>使用继承</li><li>使用默认值</li></ul><h3 id="确定声明值" tabindex="-1"><a class="header-anchor" href="#确定声明值"><span>确定声明值</span></a></h3><p>在样式表中对某一个元素写样式声明时，这个声明就会被当做css的属性值。<br> 比如：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;test&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码没有写样式，就使用浏览器的默认样式。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">: 32px;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">font-weight</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">: 700;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么现在我们给它设置一下 <code>font-size: 20px;</code><br> 这时我们写的样式和浏览器默认样式中的声明值有冲突了，会优先把我们设置的值作为css属性值，这个很好理解。<br> 我们没有写的其他的样式还是使用默认值。</p><h3 id="层叠冲突" tabindex="-1"><a class="header-anchor" href="#层叠冲突"><span>层叠冲突</span></a></h3><p>当样式表声明值有冲突时，就会使用层叠规则来确定 <em>CSS</em> 的属性值</p><p>例如：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;test&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.test</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;"> h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，两个选择器都选中了 <em>h1</em>，并且都设置了 <em>font-size</em> 属性值，同属于作者样式，这显然就属于层叠冲突了。</p><p>当发送层叠冲突时，这时就要根据选择器的 <strong>权重值</strong> 来计算究竟运用哪一条作者样式。</p><p>权重低的作者样式在 <em>Elements&gt;Styles</em> 中会被划掉</p><p>在后面记录层叠冲突权重计算规则。</p><h3 id="使用继承" tabindex="-1"><a class="header-anchor" href="#使用继承"><span>使用继承</span></a></h3><p>如果有一条属性我们没有设置，那么还不会着急去使用默认样式，还会看一下有没有存在继承。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;this is a test&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，虽然没有给p标签设置颜色，但是它依然会继承父元素div的color属性，最后显示的字体颜色就是红色。</p><h3 id="使用默认样式" tabindex="-1"><a class="header-anchor" href="#使用默认样式"><span>使用默认样式</span></a></h3><p>经过以上几个阶段之后，如果没有作者样式，也没有继承，则会使用浏览器的默认样式。</p><h2 id="层叠规则" tabindex="-1"><a class="header-anchor" href="#层叠规则"><span>层叠规则</span></a></h2><p>CSS全称是 Cascading Style Sheets，层叠样式表。其中cascade 层叠 这个概念很重要。</p><p>权重计算中的三个大因素，按重量级排列：</p><ul><li>重要性 Importance</li><li>专用型 Specificity</li><li>源代码次序 Source order</li></ul><h3 id="重要性" tabindex="-1"><a class="header-anchor" href="#重要性"><span>重要性</span></a></h3><p>在css中，有一个特别的语法可以让一个样式永远优先： <code>!important</code><br> 但是不建议使用，当代码非常复杂时不利于调试。<br> 有一个使用场景是：当需要修改某个组件的样式，但是又动不了该组件的核心代码时。</p><h3 id="专用性-权重" tabindex="-1"><a class="header-anchor" href="#专用性-权重"><span>专用性（权重）</span></a></h3><p>专用型是衡量 选择器的<strong>具体控制元素的程度</strong> 的一种方法，主要是指它能匹配到多少元素。可能有点抽象，换句话说： 如果这个选择器能匹配到的元素越少，那么就说明它的专用型越高，权重也就越高。</p><p>元素选择器 &lt; 类选择器 &lt; ID选择器 &lt; 标签内联样式 &lt; !important</p><p>一个选择器具有的专用性的量可以用四种不同的值（或组件）来衡量的，它们可以被认为是千位，百位，十位和个位，在四个列中的四个简单数字：</p><ul><li>千位：如果声明是在 <em>style</em> 属性中该列加 <em>1</em> 分（这样的声明没有选择器，所以它们的专用性总是 <em>1000</em>）否则为 <em>0</em>。</li><li>百位：在整个选择器中每包含一个 <em>ID</em> 选择器就在该列中加 <em>1</em> 分。</li><li>十位：在整个选择器中每包含一个类选择器、属性选择器、或者伪类就在该列中加 <em>1</em> 分。</li><li>个位：在整个选择器中每包含一个元素选择器或伪元素就在该列中加 <em>1</em> 分。</li></ul><blockquote><p>注：通用选择器（*）, 复合选择器（+、&gt;、~、空格）和否定伪类（:not）在专用性中无影响。</p></blockquote><p>举个例子：</p><table><thead><tr><th><strong>选择器</strong></th><th>千位</th><th>百位</th><th>十位</th><th>个位</th><th>合计值</th></tr></thead><tbody><tr><td>h1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0001</td></tr><tr><td>#indentifier</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0100</td></tr><tr><td>h1 + p::first-letter</td><td>0</td><td>0</td><td>0</td><td>3</td><td>0003</td></tr><tr><td>li &gt; a[href*=” zh-CN”] &gt; .inline-warning</td><td>0</td><td>0</td><td>2</td><td>2</td><td>0022</td></tr><tr><td>没有选择器, 规则在一个元素的 <em>style</em> 属性里</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1000</td></tr></tbody></table><h3 id="源代码次序" tabindex="-1"><a class="header-anchor" href="#源代码次序"><span>源代码次序</span></a></h3><p>如果有竞争关系的两组选择器有相同的重要性和权重的话，那么就看源代码的顺序，后面的覆盖前面的。</p><h2 id="继承规则" tabindex="-1"><a class="header-anchor" href="#继承规则"><span>继承规则</span></a></h2><p>应用于某个元素的一些属性值可以由它的子元素继承，有些属性不能继承。<br> 具体规则参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference" target="_blank" rel="noopener noreferrer">MDN</a></p><p>CSS为处理继承提供了四个特殊的通用属性值</p><ul><li><em>inherit</em>：该值将应用到选定元素的属性值设置为与其父元素一样。</li><li><em>initial</em>：该值将应用到选定元素的属性值设置为与浏览器默认样式表中该元素设置的值一样。如果浏览器默认样式表中没有设置值，并且该属性是自然继承的，那么该属性值就被设置为 <em>inherit</em>。</li><li><em>unset</em>：该值将属性重置为其自然值，即如果属性是自然继承的，那么它就表现得像 <em>inherit</em>，否则就是表现得像 <em>initial</em>。</li><li><em>revert</em>：如果当前的节点没有应用任何样式，则将该属性恢复到它所拥有的值。换句话说，属性值被设置成自定义样式所定义的属性（如果被设置）， 否则属性值被设置成用户代理的默认样式。</li></ul><blockquote><p>IE 不支持 initial 和 unset</p></blockquote><h3 id="继承的就近原则" tabindex="-1"><a class="header-anchor" href="#继承的就近原则"><span>继承的就近原则</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;Lorem ipsum dolor sit amet.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.two</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">.one</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<em>two</em> 比 <em>one</em> 更加接近 <em>p</em>，所以最终采用的是 <em>two</em> 的 <em>color</em> 值。段落呈现蓝色。</p>`,53);function r(k,c){return l(),e("div",null,[h,d,a(" more "),p])}const m=s(n,[["render",r],["__file","CSS属性计算过程.html.vue"]]),B=JSON.parse('{"path":"/exercise/HTML-CSS/CSS%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B.html","title":"CSS属性的计算过程","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"1970-01-01T00:00:00.000Z","category":["前端"],"description":"请简述css中属性的计算过程","head":[["meta",{"property":"og:url","content":"https://www.topoo.top/exercise/HTML-CSS/CSS%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"张耀"}],["meta",{"property":"og:title","content":"CSS属性的计算过程"}],["meta",{"property":"og:description","content":"请简述css中属性的计算过程"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-10T03:08:08.000Z"}],["meta",{"property":"article:author","content":"张耀"}],["meta",{"property":"article:published_time","content":"1970-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-10T03:08:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS属性的计算过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"1970-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-10T03:08:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"张耀\\"}]}"]]},"headers":[{"level":2,"title":"计算顺序","slug":"计算顺序","link":"#计算顺序","children":[{"level":3,"title":"确定声明值","slug":"确定声明值","link":"#确定声明值","children":[]},{"level":3,"title":"层叠冲突","slug":"层叠冲突","link":"#层叠冲突","children":[]},{"level":3,"title":"使用继承","slug":"使用继承","link":"#使用继承","children":[]},{"level":3,"title":"使用默认样式","slug":"使用默认样式","link":"#使用默认样式","children":[]}]},{"level":2,"title":"层叠规则","slug":"层叠规则","link":"#层叠规则","children":[{"level":3,"title":"重要性","slug":"重要性","link":"#重要性","children":[]},{"level":3,"title":"专用性（权重）","slug":"专用性-权重","link":"#专用性-权重","children":[]},{"level":3,"title":"源代码次序","slug":"源代码次序","link":"#源代码次序","children":[]}]},{"level":2,"title":"继承规则","slug":"继承规则","link":"#继承规则","children":[{"level":3,"title":"继承的就近原则","slug":"继承的就近原则","link":"#继承的就近原则","children":[]}]}],"git":{"createdTime":1725937688000,"updatedTime":1725937688000,"contributors":[{"name":"zy","email":"zhangyao_base@163.com","commits":1}]},"readingTime":{"minutes":5.15,"words":1544},"filePathRelative":"exercise/HTML-CSS/CSS属性计算过程.md","localizedDate":"1970年1月1日","excerpt":"\\n<p>请简述css中属性的计算过程</p>\\n","autoDesc":true}');export{m as comp,B as data};
